#include <stdio.h>
#include <string.h>
#include <sys/time.h>

#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "esp_event.h"
#include "esp_log.h"
#include "esp_ota_ops.h"
#include "esp_http_client.h"
#include "esp_https_ota.h"
#include "nvs.h"
#include "nvs_flash.h"
#include "esp_netif.h"
#include "esp_sntp.h"
#include "esp_https_server.h"
#include "sdkconfig.h"

#ifdef CONFIG_EXAMPLE_USE_CERT_BUNDLE
#include "esp_crt_bundle.h"
#endif

#if CONFIG_EXAMPLE_CONNECT_WIFI
#include "esp_wifi.h"
#endif

#include "cJSON.h"
#include "esp_timer.h"
#include "esp_heap_caps.h"

static const char *TAG = "enhanced_ota";

extern const uint8_t server_cert_pem_start[] asm("_binary_ca_cert_pem_start");
extern const uint8_t server_cert_pem_end[]   asm("_binary_ca_cert_pem_end");

static char ota_status[32] = "idle";

//---------------------------------------------------------------------
// Diagnostics Functions
//---------------------------------------------------------------------
static char *collect_diagnostics(const char *ota_status_str)
{
    uint64_t uptime = esp_timer_get_time() / 1000000ULL;
    int free_heap = esp_get_free_heap_size();

    cJSON *root = cJSON_CreateObject();
    cJSON_AddStringToObject(root, "device_id", "esp32_001");

    time_t now;
    time(&now);
    char time_str[32];
    strftime(time_str, sizeof(time_str), "%Y-%m-%dT%H:%M:%SZ", gmtime(&now));
    cJSON_AddStringToObject(root, "timestamp", time_str);
    cJSON_AddStringToObject(root, "ota_status", ota_status_str);

    cJSON *metrics = cJSON_CreateObject();
    cJSON_AddNumberToObject(metrics, "uptime", uptime);
    cJSON_AddNumberToObject(metrics, "free_heap", free_heap);
    cJSON_AddNumberToObject(metrics, "temperature", 0.0);
    cJSON_AddItemToObject(root, "metrics", metrics);

    cJSON_AddItemToObject(root, "errors", cJSON_CreateArray());

    char *json_str = cJSON_PrintUnformatted(root);
    cJSON_Delete(root);
    return json_str;
}

static void send_diagnostics(const char *json_payload)
{
    esp_http_client_config_t diag_config = {
        .url = "http://192.168.12.125:8071/diagnostics", // Adjust if needed.
        .method = HTTP_METHOD_POST,
        .timeout_ms = 5000,
    };
    esp_http_client_handle_t client = esp_http_client_init(&diag_config);
    esp_http_client_set_header(client, "Content-Type", "application/json");
    esp_http_client_set_post_field(client, json_payload, strlen(json_payload));
    esp_err_t err = esp_http_client_perform(client);
    if (err == ESP_OK) {
        ESP_LOGI(TAG, "Diagnostics sent successfully");
    } else {
        ESP_LOGE(TAG, "Failed to send diagnostics: %s", esp_err_to_name(err));
    }
    esp_http_client_cleanup(client);
}

static esp_err_t handle_trigger_diag(httpd_req_t *req)
{
    ESP_LOGI(TAG, "Received /trigger_diag request");
    char *diag = collect_diagnostics("on_demand");
    send_diagnostics(diag);
    httpd_resp_set_type(req, "application/json");
    httpd_resp_send(req, diag, HTTPD_RESP_USE_STRLEN);
    ESP_LOGI(TAG, "Diagnostics response sent: %s", diag);
    free(diag);
    return ESP_OK;
}

//---------------------------------------------------------------------
// OTA Update Task
//---------------------------------------------------------------------
static esp_err_t _http_event_handler(esp_http_client_event_t *evt)
{
    switch (evt->event_id) {
        case HTTP_EVENT_ERROR:
            ESP_LOGD(TAG, "HTTP_EVENT_ERROR");
            break;
        case HTTP_EVENT_ON_CONNECTED:
            ESP_LOGD(TAG, "HTTP_EVENT_ON_CONNECTED");
            break;
        default:
            break;
    }
    return ESP_OK;
}

static void simple_ota_example_task(void *pvParameter)
{
    ESP_LOGI(TAG, "Starting OTA example task");
    strcpy(ota_status, "in_progress");

    esp_http_client_config_t config = {
        .url = CONFIG_EXAMPLE_FIRMWARE_UPGRADE_URL,
#ifdef CONFIG_EXAMPLE_USE_CERT_BUNDLE
        .crt_bundle_attach = esp_crt_bundle_attach,
#else
        .cert_pem = (char *)server_cert_pem_start,
#endif
        .event_handler = _http_event_handler,
        .keep_alive_enable = true,
    };

    ESP_LOGI(TAG, "Attempting to download update from %s", config.url);
    esp_https_ota_config_t ota_config = { .http_config = &config };
    esp_err_t ret = esp_https_ota(&ota_config);

    if (ret == ESP_OK) {
        ESP_LOGI(TAG, "OTA Succeeded, Rebooting...");
        strcpy(ota_status, "success");
        vTaskDelay(1000 / portTICK_PERIOD_MS);
        esp_restart();
    } else {
        ESP_LOGE(TAG, "Firmware upgrade failed");
        strcpy(ota_status, "failed");
    }
    vTaskDelete(NULL);
}

static esp_err_t handle_trigger_ota(httpd_req_t *req)
{
    ESP_LOGI(TAG, "Received /trigger_ota request");
    strcpy(ota_status, "queued");

    xTaskCreate(&simple_ota_example_task, "manual_ota_task", 8192, NULL, 5, NULL);

    int timeout = 60;
    while (timeout-- > 0) {
        if (strcmp(ota_status, "success") == 0 || strcmp(ota_status, "failed") == 0) {
            break;
        }
        vTaskDelay(1000 / portTICK_PERIOD_MS);
    }

    char response[128];
    snprintf(response, sizeof(response), "{ \"ota_status\": \"%s\" }", ota_status);

    httpd_resp_set_type(req, "application/json");
    httpd_resp_send(req, response, HTTPD_RESP_USE_STRLEN);

    ESP_LOGI(TAG, "Sent OTA confirmation: %s", response);
    return ESP_OK;
}

//---------------------------------------------------------------------
// HTTP Server Setup (Register Endpoints)
//---------------------------------------------------------------------
static httpd_handle_t start_https_server(void)
{
    httpd_config_t config = HTTPD_DEFAULT_CONFIG();
    httpd_handle_t server = NULL;

    if (httpd_start(&server, &config) == ESP_OK) {
        ESP_LOGI(TAG, "HTTP server started successfully");

        httpd_uri_t trigger_uri = {
            .uri       = "/trigger_ota",
            .method    = HTTP_GET,
            .handler   = handle_trigger_ota,
            .user_ctx  = NULL
        };
        if (httpd_register_uri_handler(server, &trigger_uri) == ESP_OK) {
            ESP_LOGI(TAG, "Registered /trigger_ota successfully.");
        } else {
            ESP_LOGE(TAG, "Failed to register /trigger_ota.");
        }

        httpd_uri_t diag_uri = {
            .uri       = "/trigger_diag",
            .method    = HTTP_GET,
            .handler   = handle_trigger_diag,
            .user_ctx  = NULL
        };
        if (httpd_register_uri_handler(server, &diag_uri) == ESP_OK) {
            ESP_LOGI(TAG, "Registered /trigger_diag successfully.");
        } else {
            ESP_LOGE(TAG, "Failed to register /trigger_diag.");
        }

        ESP_LOGI(TAG, "HTTP server running. Endpoints: /trigger_ota, /trigger_diag.");
    } else {
        ESP_LOGE(TAG, "Failed to start HTTP server.");
    }
    return server;
}

//---------------------------------------------------------------------
// OTA Diag Initialization (No SNTP, No Midnight Updates)
//---------------------------------------------------------------------
void ota_diag_init(void)
{
    // We assume SNTP is handled in main.c if needed.
    start_https_server();
    ESP_LOGI(TAG, "OTA diag initialized: HTTP server started (no SNTP, no midnight updates).");
}

void ota_diag_init_no_sntp(void)
{
    start_https_server();
    // Do NOT spawn the midnight update task.
    ESP_LOGI(TAG, "OTA diag initialized: HTTP server started (no SNTP, no midnight updates).");
}
